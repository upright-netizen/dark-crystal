
#
# A start to Dark Crystal
#

#
#       8""""8
#       8    " eeeee e     eeeee eeeee  eeeee
#       8e     8  88 8     8  88 8   8  8   "
#       88     8   8 8e    8   8 8eee8e 8eeee
#       88   e 8   8 88    8   8 88   8    88
#       88eee8 8eee8 88eee 8eee8 88   8 8ee88
#

bold="\033[1m";
bold_off="\033[22m";

# Text colors
red="\033[0;31m";
back_red="\033[0;41;30m";
green="\033[0;32m";
yellow="\033[0;33m";
purple="\033[0;35m";

# Resets all
stop="\033[0m";


# Stubs and Templates
resources=/usr/local/dark-crystal/resources;

#
# Usage
#

function dark_crystal_usage () {

  linkLocation=$(readlink "$0")
  linkLocationDir=$(dirname "$linkLocation");
  test "$linkLocationDir" != "/usr/local/dark-crystal/bin" && {
    echo "${back_red}"
    echo "     [dev mode]                                                        ${stop}";

  }

  echo "${purple}"
  echo "  usage: ${bold}dark${bold_off} <${bold}command${bold_off}> [${bold}args${bold_off}]";
  echo "${stop}"
cat <<USAGE
  Commands

  ====================================================================

    component <name>              Create a new polymer web component
    prototype <name>              Create a new html prototype
    update                        Update dark crystal
    uninstall                     Uninstall dark-crystal

USAGE
}

function dark_crystal_generate_package_json {

  local name=$1
  local version=$2
  local description=$3
  local author=$4

#
# Generate package.json
#

sed -e \
  "s;%NAME%;$name;g" -e \
  "s;%VERSION%;$version;g" -e \
  "s;%DESCRIPTION%;$description;g" -e \
  "s;%AUTHOR%;$author;g" \
$resources/package.json.template > package.json

}

function dark_crystal_generate_bower_json {
  local name=$1
  local version=$2
  local description=$3
  local author=$4

  #
  # Generate bower.json
  #

  sed -e \
    "s;%NAME%;$name;g" -e \
    "s;%VERSION%;$version;g" -e \
    "s;%DESCRIPTION%;$description;g" -e \
    "s;%AUTHOR%;$author;g" \
  $resources/bower.json.template > bower.json
}

function dark_crystal_generate_package_files {
  echo
  echo "$green Collecting information for config files $stop";
  echo

  #
  # Default Values
  #
  classification=$1
  defaultName=$(basename "$PWD");
  defaultVersion="0.0.0";
  defaultDescription="<description here>";
  defaultAuthor=$(git config --global user.name);

  read -p "Name: ($defaultName) " name;
  name=${name:-$defaultName};

  read -p "Version: ($defaultVersion) " version;
  version=${version:-$defaultVersion};

  read -p "Description: " description;
  description=${description:-$defaultDescription};

  read -p "Author: ($defaultAuthor) " author
  author=${author:-$defaultAuthor};

  dark_crystal_generate_package_json "$name" "$version" "$description" "$author";

  test "$classification" = "component" && {
    dark_crystal_generate_bower_json "$name" "$version" "$description" "$author";
  }
}

function dark_crystal_install_component_dependencies {
  #
  # npm install
  #

  echo
  echo "$green NPM install $stop";
  echo

  # make a node_modules folder locally so they don't get installed somewhere else on the path
  test -d node_modules || mkdir -p node_modules;

  # install grunt contrib plugins
  npm install --save-dev grunt-contrib-jshint grunt-contrib-connect grunt-contrib-watch grunt-text-replace;

  echo
  echo "$green Bower install $stop";
  echo

  bower install;
}

function dark_crystal_install_prototype_dependencies {
  #
  # npm install
  #

  echo
  echo "$green NPM install $stop";
  echo

  # make a node_modules folder locally so they don't get installed somewhere else on the path
  test -d node_modules || mkdir -p node_modules;

  # install grunt contrib plugins
  npm install --save-dev grunt-contrib-connect;
}

function dark_crystal_create_folder {
  folder=$1

  if test -d "$folder"; then
    echo "$red$folder exists. Exiting";
    exit 1;
  fi

  # make directory for new thing
  mkdir "$folder";

  # cd to directory
  cd "$folder";

  unset folder
}

function dark_crystal_generate_gruntfile {
  echo
  echo "$green Making Gruntfile $stop";
  echo

  local classification=$1

  cat "$resources/$classification-gruntfile.js" > Gruntfile.js;
}

function dark_crystal_generate_component_html {
  local webcomponent=$1

  echo
  echo "$green Creating src and dist folders $stop";
  echo

  # make src and dist directories
  mkdir src dist;

  echo
  echo "$green Generating web component: $webcomponent $stop";
  echo

  # generate web component
  sed -e \
    "s;%COMPONENT%;$webcomponent;g" \
  "$resources/webcomponent.html.template" > "src/$webcomponent.html"

  # generate index.html
  sed -e \
    "s;%COMPONENT%;$webcomponent;g" \
  "$resources/component-index.html.template" > "index.html"
}

function dark_crystal_generate_prototype_html {
  local name=$1

  echo
  echo "$green Generating index.html $stop";
  echo

  sed -e \
    "s;%PROTOTYPE%;$name;g" \
  "$resources/prototype-index.html.template" > "index.html"
}

function dark_crystal_generate_html {
  local classification=$1
  local name=$2

  test "$classification" = "component" && {
    dark_crystal_generate_component_html "$name";
  }

  test "$classification" = "prototype" && {
    dark_crystal_generate_prototype_html "$name";
  }
}

function dark_crystal_new_component {
  # ensure we have a name
  if [ -z "$1" ]; then
    echo "$yellow Please supply the name. $stop";
    return;
  fi

  local component=$1
  local classification=component

  dark_crystal_create_folder "$component";
  dark_crystal_generate_package_files $classification;
  dark_crystal_generate_gruntfile $classification;
  dark_crystal_install_component_dependencies;
  dark_crystal_generate_html $classification "$component";

  echo
  echo "$green Done. $stop";
  echo
  echo "$olive New component created at $green$(pwd)$stop";
  echo
}

function dark_crystal_new_prototype {
  # ensure we have a name
  if [ -z "$1" ]; then
    echo "$yellow Please supply the name. $stop";
    return;
  fi

  local name=$1
  local classification=prototype

  dark_crystal_create_folder "$name";
  dark_crystal_generate_package_files $classification;
  dark_crystal_generate_gruntfile $classification;
  dark_crystal_install_prototype_dependencies;
  dark_crystal_generate_html $classification "$name";

  echo
  echo "$green Done. $stop";
  echo
  echo "$olive New component created at $green$(pwd)$stop";
  echo
}


#                        ooooo     ooo     .    o8o  oooo
#                        `888'     `8'   .o8    `"'  `888
#                         888       8  .o888oo oooo   888   .oooo.o
#                         888       8    888   `888   888  d88(  "8
#                         888       8    888    888   888  `"Y88b.
#                         `88.    .8'    888 .  888   888  o.  )88b
#                           `YbodP'      "888" o888o o888o 8""888P'


function dark_crystal_update {
  # WIP
  cd /usr/local/dark-crystal;
  git pull origin master;
  rm /usr/local/bin/dark;
  ln -s /usr/local/dark-crystal/bin/dark-crystal /usr/local/bin/dark;
}

function dark_crystal_uninstall {
  echo "${red}"
  read -p "Are you sure? " -n 1 -r
  echo
  echo "${stop}"
  if [[ $REPLY =~ ^[Yy]$ ]]
  then
    test -d /usr/local/dark-crystal && rm -rf /usr/local/dark-crystal;
    test -e /usr/local/bin/dark && rm /usr/local/bin/dark;
  fi
}

function dark_crystal_link {
  devLocation=${1:-~/Code/dark-crystal};

  test -d "$devLocation" && {
    echo
    echo "${green}Linking dev version of dark-crystal${stop}";
    echo
    rm /usr/local/bin/dark;
    ln -s "$devLocation"/bin/dark-crystal /usr/local/bin/dark;
    return;
  }

  echo "${yellow}Can't find location of dark crystal${stop}";
}

#
# Init
#

 test -z "$1" && {
  dark_crystal_usage;
  exit 1;
 }

  test "$1" = "component" && shift && dark_crystal_new_component "$@";
  test "$1" = "prototype" && shift && dark_crystal_new_prototype "$@";
  test "$1" = "update" && shift && dark_crystal_update "$@";
  test "$1" = 'uninstall' && shift && dark_crystal_uninstall "$@";
  # dev options
  test "$1" = 'link' && shift && dark_crystal_link "$@";